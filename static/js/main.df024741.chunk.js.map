{"version":3,"sources":["../node_modules/sentiment/languages sync /^/.*/index$","components/output.js","components/feed.js","App.js","serviceWorker.js","index.js"],"names":["map","./en/index","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","OutputItem","react_default","a","createElement","Tile_default","className","style","background","this","props","SAValue","Content","title","textInput","score","Component","Feed","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","outputListState","onSubmitBtnClick","bind","assertThisInitialized","onClearBtnClick","txt","output","Sentiment","analyze","comparative","Math","abs","colrConv","ipt","scr","colrDiff","concat","event","inputText","nlpOutput","nlpAnalysis","outputItemComp","components_output","key","length","setState","feed_InputBar","InputBar","evt","target","value","_this2","SearchInput","noSearchBtn","onEnter","clearInput","onChange","updateInputValue","Button","type","onClick","disabled","App","feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df024741.chunk.js","sourcesContent":["var map = {\n\t\"./en/index\": 12\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 40;","import React, { Component } from 'react';\r\nimport Tile from 'fundamental-react/lib/Tile/Tile.js';\r\n\r\nclass OutputItem extends Component {\r\n\r\n  render() {\r\n      return (        \r\n        <Tile className=\"outputLine\" style={{background: this.props.SAValue}}>\r\n          <Tile.Content title={this.props.textInput} className=\"outputLineCnt\">\r\n            <p>\r\n              {this.props.score}\r\n            </p>\r\n          </Tile.Content>\r\n        </Tile>\r\n        )\r\n    }\r\n  }\r\n  \r\nexport default OutputItem","import React, { Component } from 'react';\r\nimport OutputItem from './output.js';\r\nimport { SearchInput } from 'fundamental-react/lib/SearchInput';\r\nimport { Button } from 'fundamental-react/lib/Button';\r\nimport Sentiment from 'sentiment';\r\n\r\nclass Feed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {outputListState: [], textInput: \"\"};\r\n        this.onSubmitBtnClick = this.onSubmitBtnClick.bind(this);\r\n        this.onClearBtnClick = this.onClearBtnClick.bind(this);\r\n    }\r\n\r\n    nlpAnalysis(txt) {    \r\n        const sentiment = new Sentiment();\r\n        let output = sentiment.analyze(txt)\r\n\r\n        output.comparative = Math.abs(output.comparative) > 1 ? output.comparative / output.comparative : output.comparative\r\n\r\n        let colrOutput = this.colrConv(output)\r\n        \r\n        return [colrOutput, output.comparative]\r\n    }\r\n\r\n    colrConv(ipt) {\r\n\r\n        let scr = ipt.comparative\r\n        let colrDiff = 155 * Math.abs(scr)\r\n\r\n        let hexcodeConv = `rgb(${scr < 0 ? 100 + colrDiff : 100 }, ${scr > 0 ? 100 + colrDiff : 100 }, 100)`\r\n\r\n        return hexcodeConv\r\n\r\n    }\r\n\r\n    onSubmitBtnClick(event) {\r\n\r\n        let inputText = this.state.textInput;\r\n\r\n        switch (inputText) {\r\n            case \"\":\r\n                break;\r\n            default:\r\n                let nlpOutput = this.nlpAnalysis(inputText);\r\n                let outputItemComp = <OutputItem key={this.state.outputListState.length} textInput={inputText} SAValue={nlpOutput[0]} score={nlpOutput[1]} />;\r\n\r\n                this.setState((state) => {\r\n\r\n                    let output = [outputItemComp].concat(state.outputListState)\r\n\r\n                    return {outputListState: output}\r\n                });\r\n    }}\r\n\r\n    onClearBtnClick(event) {\r\n\r\n        this.setState((state) => {\r\n\r\n            return {outputListState: []}\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n      return (\r\n          <div>\r\n            <InputBar />\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass InputBar extends Feed {\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({\r\n            textInput: evt.target.value\r\n    })};\r\n\r\n    clearInput() {\r\n        this.setState((state) => {\r\n            return {textInput: \"\"}\r\n        })\r\n    };\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n        <div className=\"outputContainer\">\r\n            {this.state.outputListState}        \r\n        </div>\r\n        <div className=\"inputBox\">\r\n            <SearchInput\r\n            noSearchBtn\r\n            id=\"inputBox\"\r\n            onEnter={() => {                \r\n                this.onSubmitBtnClick()\r\n                this.clearInput()\r\n                return\r\n            }}\r\n            className=\"Box\"\r\n            value={this.state.textInput}\r\n            onChange={evt => this.updateInputValue(evt)}\r\n            />\r\n            <Button className=\"Btn\" type=\"standard\" onClick={this.onSubmitBtnClick}>\r\n              Analyze\r\n            </Button>\r\n            <Button className=\"Btn\" type=\"standard\" onClick={this.onClearBtnClick} disabled={this.state.outputListState.length > 0 ? false : true}>\r\n              Clear Feed\r\n            </Button>\r\n        </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n  \r\nexport default Feed","import React, { Component } from 'react';\r\nimport Feed from './components/feed';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App App-header\">\r\n        <h3 className=\"title\">Sentiment Analysis Input</h3>\r\n        <Feed />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}